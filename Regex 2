/*
                   (?: re)	     Groups regular expressions without remembering the matched text.
                   re*         	Matches 0 or more occurrences of the preceding expression.
                   re+	         Matches 1 or more of the previous thing.
                   \s	          Matches the whitespace. Equivalent to [\t\n\r\f].
                   \b	          Matches the word boundaries when outside the brackets.
                                Matches the backspace (0x08) when inside the brackets.
                                
                                
                                https://www.tutorialspoint.com/java/java_regular_expressions.htm
*/


import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class DuplicateWords {

public static void main(String[] args) {

String regex = "\\b([a-z]+)\\b(?:\\s+\\1\\b)+";
 Pattern p = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);

Scanner in = new Scanner(System.in);
 int numSentences = Integer.parseInt(in.nextLine());
 
 while (numSentences-- > 0) {
 String input = in.nextLine();
 
 Matcher m = p.matcher(input);
 
 // Check for subsequences of input that match the compiled pattern
 while (m.find()) {
 input = input.replaceAll(m.group(), m.group(1));
 }
 
 // Prints the modified sentence.
 System.out.println(input);
 }

 in.close();
 }
}
